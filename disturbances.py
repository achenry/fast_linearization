import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import os

def read_dist(filename):
    data_points = []
    with open(filename, "r") as f:
        for l in f:
            if l.split()[0] != '!':
                data_points.append([float(x) for x in l.split()])
        f.close()
    return np.vstack(data_points)

def generate_uniform_ts(dt, Tmax, uniform_vals):
    dt = Tmax
    time = np.arange(0, Tmax + dt, dt)
    ts = np.zeros((len(time), len(uniform_vals) + 1))
    ts[:, 0] = time
    for v, val in enumerate(uniform_vals):
        ts[:, v + 1] = val
    return ts


def generate_uniform_step_ts(dt, uni_Tmax, Tmax, uniform_vals, step_vals):
    # time = np.arange(0, Tmax + dt, dt)
    ts = generate_uniform_ts(dt, uni_Tmax - dt, uniform_vals)
    dist_ts = np.zeros((int((Tmax - uni_Tmax + dt) // dt) + 1, len(uniform_vals) + 1))
    dist_time = np.arange(uni_Tmax, Tmax + dt, dt)
    dist_ts[:, 0] = dist_time
    uni_Tend = len(ts)
    ts = np.vstack([ts, dist_ts])

    for v in range(len(uniform_vals)):
        # dist_time = np.arange(0, int(Tmax - uni_Tmax) + dt, dt)
        # uni_Tend = int((uni_Tmax + dt) // dt)
        # ts[:uni_Tend, v + 1] = uniform_vals[v]
        ts[uni_Tend:, v + 1] = uniform_vals[v] + step_vals[v] * np.heaviside(dist_time, 1)
    return ts


def generate_uniform_sine_ts(dt, uni_Tmax, Tmax, uniform_vals, amp_vals, freq_vals, phase_vals):
    ts = generate_uniform_ts(dt, uni_Tmax - dt, uniform_vals)
    dist_ts = np.zeros((int((Tmax - uni_Tmax + dt) // dt) + 1, len(uniform_vals) + 1))
    dist_time = np.arange(uni_Tmax, Tmax + dt, dt)
    dist_ts[:, 0] = dist_time
    uni_Tend = len(ts)
    ts = np.vstack([ts, dist_ts])

    for v in range(len(uniform_vals)):
        ts[uni_Tend:, v + 1] = uniform_vals[v] + amp_vals[v] * np.sin(freq_vals[v] * dist_time + phase_vals[v])
    return ts


def generate_uniform_input(filename, dt, Tmax, uniform_vals):
    ts = generate_uniform_ts(dt, Tmax, uniform_vals)
    with open(filename, 'w') as f:
        f.write('!  Time     Blpitch     GenTq\n')
        for i in range(len(ts)):
            f.write('{:<12.3f}{:<25.17f}{:<12.3f}\n'.format(int(ts[i, 0]), ts[i, 1], ts[i, 2]))
        f.close()
    return ts


def generate_uniform_step_input(filename, dt, uni_Tmax, Tmax, uniform_vals, step_vals):
    ts = generate_uniform_step_ts(dt, uni_Tmax, Tmax, uniform_vals, step_vals)
    with open(filename, 'w') as f:
        f.write('!  Time     Blpitch     GenTq\n')
        for i in range(len(ts)):
            f.write('{:<12.3f}{:<25.17f}{:<12.3f}\n'.format(ts[i, 0], ts[i, 1], ts[i, 2]))

        f.close()
    return ts


def generate_uniform_sine_input(filename, dt, uni_Tmax, Tmax, uniform_vals, amp_vals, freq_vals, phase_vals):
    ts = generate_uniform_sine_ts(dt, uni_Tmax, Tmax, uniform_vals, amp_vals, freq_vals, phase_vals)
    with open(filename, 'w') as f:
        f.write('!  Time     Blpitch     GenTq\n')
        for i in range(len(ts)):
            f.write('{:<12.3f}{:<25.17f}{:<12.3f}\n'.format(ts[i, 0], ts[i, 1], ts[i, 2]))

        f.close()
    return ts

def generate_uniform_wind(filename, dt, Tmax, uniform_val):
    ts = generate_uniform_ts(dt, Tmax, uniform_val)
    with open(filename, 'w') as f:
        f.write(
            '! This wind file was generated by GenPwrCrvWind (v1.00.00a-mlb, 12-Dec-2011) on 08-May-2013 at 010:33:17.\n')
        f.write('!\n')
        f.write('! Time     Wind    Wind    Vertical    Horiz.      Pwr.Law     Lin.Vert.   Gust     Upflow\n')
        f.write('!          Speed   Dir     Speed       Shear       Vert.Shr    Shear       Speed    Angle \n')
        f.write('! (sec)    (m/s)   (Deg)   (m/s)                                            (m/s)   (deg)\n')
        for i in range(len(ts)):
            f.write('{:<11}{:<11}{:<11}{:<11}{:<11}{:<11}{:<11}{:<11}{:<11}\n'.format(np.round(ts[i, 0], 3), ts[i, 1], 0, 0, 0, 0, 0, 0, 0))
        f.close()
    return ts

def generate_step_wind(filename, t_int=200, u=[12, 14, 16, 18, 20], Tmax=60, shear=0.12, zero_start=True):

    t_int = Tmax / len(u)
    t_ramp = t_int * 0.2
    t_int = t_int * 0.8

    if zero_start:
        time = [t_int * k for k in range(int(u[0] / 2) + 1)]
        wind = [int(u[0] / 2) * k for k in range(int(u[0] / 2) + 1)]
    else:
        time = [0]
        wind = [u[0]]
    # time = []
    # wind = []
    for u_idx in range(len(u)):
        t_start = (time[-1] if len(time) else 0)
        time += [t_start + t_ramp, t_start + t_ramp + t_int]
        wind += [u[u_idx]] * 2

    ts = np.vstack([time, wind]).T

    with open(filename, 'w') as f:
        f.write(
            '! This wind file was generated by GenPwrCrvWind (v1.00.00a-mlb, 12-Dec-2011) on 08-May-2013 at 010:33:17.\n')
        f.write('!\n')
        f.write('! Time     Wind    Wind    Vertical    Horiz.      Pwr.Law     Lin.Vert.   Gust     Upflow\n')
        f.write('!          Speed   Dir     Speed       Shear       Vert.Shr    Shear       Speed    Angle \n')
        f.write('! (sec)    (m/s)   (Deg)   (m/s)                                            (m/s)   (deg)\n')

        for i in range(len(ts)):
            f.write(
                '{:<11}{:<11}{:<11}{:<11}{:<11}{:<11}{:<11}{:<11}{:<11}\n'.format(np.round(ts[i, 0], 3), ts[i, 1], 0, 0,
                                                                                  0, shear, 0, 0, 0))
        f.close()
    return ts


def generate_uniform_step_wind(filename, dt, uni_Tmax, Tmax, uniform_val, step_val, shear=0.12):
    ts = generate_uniform_step_ts(dt, uni_Tmax, Tmax, uniform_val, step_val)

    with open(filename, 'w') as f:
        f.write(
            '! This wind file was generated by GenPwrCrvWind (v1.00.00a-mlb, 12-Dec-2011) on 08-May-2013 at 010:33:17.\n')
        f.write('!\n')
        f.write('! Time     Wind    Wind    Vertical    Horiz.      Pwr.Law     Lin.Vert.   Gust     Upflow\n')
        f.write('!          Speed   Dir     Speed       Shear       Vert.Shr    Shear       Speed    Angle \n')
        f.write('! (sec)    (m/s)   (Deg)   (m/s)                                            (m/s)   (deg)\n')
        for i in range(len(ts)):
            f.write('{:<11}{:<11}{:<11}{:<11}{:<11}{:<11}{:<11}{:<11}{:<11}\n'.format(ts[i, 0], ts[i, 1], 0, 0, 0, shear, 0, 0, 0))

        f.close()
    return ts


def generate_uniform_sine_wind(filename, dt, uni_Tmax, Tmax, uniform_val, amp_val, freq_val, phase_val):
    # if not os.path.exists(uni_sine_windfile):
    ts = generate_uniform_sine_ts(dt, uni_Tmax, Tmax, uniform_val, amp_val, freq_val, phase_val)
    with open(filename, 'w') as f:
        f.write(
            '! This wind file was generated by GenPwrCrvWind (v1.00.00a-mlb, 12-Dec-2011) on 08-May-2013 at 010:33:17.\n')
        f.write('!\n')
        f.write('! Time     Wind    Wind    Vertical    Horiz.      Pwr.Law     Lin.Vert.   Gust     Upflow\n')
        f.write('!          Speed   Dir     Speed       Shear       Vert.Shr    Shear       Speed    Angle \n')
        f.write('! (sec)    (m/s)   (Deg)   (m/s)                                            (m/s)   (deg)\n')
        for i in range(len(ts)):
            f.write('{:<11}{:<11}{:<11}{:<11}{:<11}{:<11}{:<11}{:<11}{:<11}\n'.format(ts[i, 0], ts[i, 1], 0, 0, 0, 0, 0, 0, 0))

        f.close()
    return ts


def plot_disturbances(disturbances, dist_files, fig_path):
    # plot disturbances
    dist_df = pd.DataFrame(dist_files)
    # for dist_idx, dist_row in dist_df.iterrows():
    dist_types = disturbances.keys()
    wind_speeds = pd.unique(dist_df['wind_speed'])

    for wind_speed_idx, wind_speed in enumerate(wind_speeds):
        wind_speed_rows = dist_df.loc[dist_df['wind_speed'] == wind_speed]

        for dist_type_idx, dist_type in enumerate(dist_types):

            dist_type_rows = wind_speed_rows.loc[wind_speed_rows['dist_type'] == dist_type]
            dist_signals = pd.unique(dist_type_rows['dist_signal'])

            if len(dist_signals) == 0:
                continue

            dist_fig, dist_ax = plt.subplots(len(dist_signals), 1, sharex=True, sharey=True)
            dist_ax[0].set_title(f'Wind Speed = {wind_speed} m/s')

            # if dist_ax is not list:
            #     dist_ax = [dist_ax]

            dist_ax[-1].set_xlabel('time (s)')

            dist_ax[0].set_ylabel(dist_type)

            # plot blpitch steps for different amplitudes, sine for different frequencies
            for dist_signal_idx, dist_signal in enumerate(dist_signals):
                dist_signal_rows = dist_type_rows.loc[dist_df['dist_signal'] == dist_signal]
                y_ticks = set(disturbances[dist_type]['uni_val'])

                for dist_idx, dist_row in dist_signal_rows.iterrows():
                    # dist_row = dist_signal_rows.iloc[dist_idx]
                    dist_ts = read_dist(dist_row['filename'])
                    # dist_ax[dist_signal_idx].plot(dist_ts[:, 0], dist_ts[:, 1], label=f'{dist_row.wind_speed} m/s')
                    dist_ax[dist_signal_idx].plot(dist_ts[:, 0], dist_ts[:, dist_type_idx + 1])
                    y_vals = [np.min(dist_ts[:, dist_type_idx + 1]), np.max(dist_ts[:, dist_type_idx + 1])]

                    for y_val in y_vals:
                        y_ticks.add(y_val)

                dist_ax[dist_signal_idx].set_yticks(ticks=list(y_ticks))
                dist_ax[dist_signal_idx].set_ylabel(f'{dist_type}-{dist_signal}')

            dist_ax[-1].legend()
            plt.show()
            plt.savefig(os.path.join(fig_path, f'dist_{dist_type}.png'))

def generate_wind_files(**kwargs):

    if kwargs['wind_type'] == 'step':
        init_speed = kwargs['wind_speeds'][0]
        final_speed = kwargs['wind_speeds'][-1]
        wind_files = [os.path.join(kwargs['wind_dir'], '{u0}-{uf}Step.wnd'.format(u0=init_speed, uf=final_speed))]
        generate_step_wind(wind_files[0], t_int=kwargs['t_int'], u=kwargs['wind_speeds'], Tmax=kwargs['Tmax'], zero_start=kwargs['zero_start'])

    elif kwargs['wind_type'] == 'uniform':
        wind_files = [os.path.join(kwargs['fast_models_dir'], 'Model', 'Wind', 'uni_wind_{u}.dat'.format(u=wind_speed))
                      for wind_speed in kwargs['wind_speeds']]

        for u_idx, u in enumerate(kwargs['wind_speeds']):
            generate_uniform_wind(wind_files[u_idx], kwargs['dt'], kwargs['Tmax'], [u])

    return wind_files
